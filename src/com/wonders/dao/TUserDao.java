package com.wonders.dao;

import java.math.*;
import java.sql.*;
import java.util.*;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;

/**
 * 
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class TUserDao {

    private Connection con = null;

    public TUserDao() {
    }

    public TUserDao(Connection con) {
        this.con = con;
    }

    public void add(TUser info) {
        String sql = "insert into T_USER(ID, PASSWORD, REMARKS, USER_NAME) values (?, ?, ?, ?)";
        Object[] obj = {
            info.getId(),
            info.getPassword(),
            info.getRemarks(),
            info.getUserName()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update T_USER set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from T_USER";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public PaginationArrayList<TUser> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("T_USER", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "T_USER", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<TUser> pal = new PaginationArrayList<TUser>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            TUser info = new TUser();
            info.setId(rs.getBigDecimal("ID"));
            info.setPassword(rs.getOriginalString("PASSWORD"));
            info.setRemarks(rs.getOriginalString("REMARKS"));
            info.setUserName(rs.getOriginalString("USER_NAME"));
            pal.add(info);
        }
        return pal;
    }

    public List<TUser> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("T_USER", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "T_USER", "*", conds, suffix);
        }
        ArrayList<TUser> al = new ArrayList<TUser>();
        while (rs.next()) {
            TUser info = new TUser();
            info.setId(rs.getBigDecimal("ID"));
            info.setPassword(rs.getOriginalString("PASSWORD"));
            info.setRemarks(rs.getOriginalString("REMARKS"));
            info.setUserName(rs.getOriginalString("USER_NAME"));
            al.add(info);
        }
        return al;
    }

}