package com.wonders.dao;

import java.math.*;
import java.sql.*;
import java.util.*;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;

/**
 * 
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class EasyuiTreeDao {

    private Connection con = null;

    public EasyuiTreeDao() {
    }

    public EasyuiTreeDao(Connection con) {
        this.con = con;
    }

    public void add(EasyuiTree info) {
        String sql = "insert into EASYUI_TREE(ID, CHECKED, ICONCLS, PARENTID, TEXT, URL, LAST_MODIFIED) values (?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getId(),
            info.getChecked(),
            info.getIconcls(),
            info.getParentid(),
            info.getText(),
            info.getUrl(),
            info.getLastModified()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update EASYUI_TREE set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from EASYUI_TREE";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public PaginationArrayList<EasyuiTree> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("EASYUI_TREE", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "EASYUI_TREE", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<EasyuiTree> pal = new PaginationArrayList<EasyuiTree>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            EasyuiTree info = new EasyuiTree();
            info.setId(rs.getOriginalString("ID"));
            info.setChecked(rs.getOriginalString("CHECKED"));
            info.setIconcls(rs.getOriginalString("ICONCLS"));
            info.setParentid(rs.getOriginalString("PARENTID"));
            info.setText(rs.getOriginalString("TEXT"));
            info.setUrl(rs.getOriginalString("URL"));
            info.setLastModified(rs.getTimestamp("LAST_MODIFIED"));
            pal.add(info);
        }
        return pal;
    }

    public List<EasyuiTree> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("EASYUI_TREE", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "EASYUI_TREE", "*", conds, suffix);
        }
        ArrayList<EasyuiTree> al = new ArrayList<EasyuiTree>();
        while (rs.next()) {
            EasyuiTree info = new EasyuiTree();
            info.setId(rs.getOriginalString("ID"));
            info.setChecked(rs.getOriginalString("CHECKED"));
            info.setIconcls(rs.getOriginalString("ICONCLS"));
            info.setParentid(rs.getOriginalString("PARENTID"));
            info.setText(rs.getOriginalString("TEXT"));
            info.setUrl(rs.getOriginalString("URL"));
            info.setLastModified(rs.getTimestamp("LAST_MODIFIED"));
            al.add(info);
        }
        return al;
    }

}